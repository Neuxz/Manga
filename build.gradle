
// general setup
allprojects { project ->
	apply plugin: 'eclipse'
	
	group 'de.herrlock'
	version '1.4.0-BETA-SNAPSHOT'
	
	apply plugin: 'java'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'
	apply plugin: 'maven-publish'
	
	sourceCompatibility = '1.7'
	
	dependencies {
		testCompile 'junit:junit:4.12'
		testCompile 'org.mockito:mockito-core:1.10.19'
	}
	
	jar.manifest {
		attributes 'Built-With' : GradleVersion.current(),
			'Created-By' : "${System.properties.'java.runtime.version'} (${System.properties.'java.vm.vendor'})"
	}
	
	findbugs {
		effort = 'max'
		reportLevel = 'low'
	}
	tasks.withType(FindBugs) {
	    reports {
	        xml.enabled = false
	        html.enabled = true
	    }
	}
	
	pmd {
		ignoreFailures = true
		ruleSetFiles = files("${rootProject.projectDir}/misc/pmd.rulesets.xml")
	}
	
	eclipse.project {
		buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
	}
	eclipse.classpath {
        file.withXml {
            def jfxrt = it.asNode().children().find{ entry ->
            	return entry['@path'].contains('jfxrt') 
            }
        	println jfxrt
            Node attributes = new Node(jfxrt, 'attributes')
            Node attribute = new Node(attributes, 'attribute')
            attribute.'@name' = 'javadoc_location'
            attribute.'@value' = 'http://docs.oracle.com/javafx/2/api/'
        }
	}
	
	repositories {
		mavenCentral()
	}
}

// build-helper
def temp = mkdir("${rootProject.buildDir}/disttemp/")

task createLibs (type: Copy, description: 'Create jar from subprojects and copies them into the lib-folder') {
	into new File(temp, 'lib')
    subprojects.each { s -> 
		dependsOn s.jar
		from s.jar
		from s.configurations.runtime
	}
}

task copyOther (type: Copy, description: 'Copy other resources to the temp-folder') {
	from 'LICENSE'
	into temp
}

task copyDist (type: Copy, description: 'Copy content of \"src/dist\" to the temp-folder') {
	from 'src/dist'
	into temp
}

task compileRun (description: 'Compile run.cs and copy the exe into the build-folder') {
    def csfolder = 'src/main/cs'
    def filename = 'Run.exe'
    def exefile = new File(csfolder, filename)
    doLast {
    	try {
	        exec {
	            workingDir csfolder
	            commandLine 'cmd', '/c', 'csc', '/t:winexe', "/out:${filename}", '/nologo', 'run.cs'
	        }
	        copy {
	            from exefile
	            into temp
	        }
	        delete exefile
        } catch(org.gradle.process.internal.ExecException ex) {
			logger.warn 'run.cs could not be compiled to run.exe, csc missing on path'
        }
    }
}

task copyLauncher(type: Copy, dependsOn: jar, description: 'Copies the launcher to the root folder') {
	from tasks.jar.outputs.files
	into temp
}

//distribution-task
task dist (type: Zip, group: 'build', dependsOn: [createLibs, copyOther, copyDist, compileRun, copyLauncher], description: 'Creates a distribution in a zip-file') {
    destinationDir = file('build')
    baseName = project.name
    version = project.version
    
    into baseName + '-' + version
    from temp
}


// project-configuration
dependencies {
	subprojects.each {
		compile it
	}
	compile 'commons-cli:commons-cli:1.3.1'
}

jar {
	archiveName = 'MangaLauncher.jar'
	manifest {
		attributes 'Main-Class' : 'de.herrlock.manga.Main',
			'Class-Path' : project.configurations.runtime.collect{ file -> "lib/${file.name}" }.join(' ')
	}
}
