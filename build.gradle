// buildscript-dependencies
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.5.0'
    }
}
ext {
    grgit = org.ajoberstar.grgit.Grgit.open()
    githead = grgit.head()
    gitbranch = grgit.branch.getCurrent()
}

apply plugin: 'distribution'

// general setup
allprojects {
	apply plugin: 'eclipse'
	
	group 'de.herrlock.manga'
	version '1.4.0-BETA-SNAPSHOT'
	
	apply plugin: 'java'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'
	apply plugin: 'jacoco'
	apply plugin: 'maven-publish'
	apply plugin: 'project-report'
	apply plugin: 'build-dashboard'
	
	sourceCompatibility = '1.7'
	
	dependencies {
		// compile-annotations
		compileOnly 'com.google.code.findbugs:annotations:3.0.1'
		compileOnly 'com.google.auto.service:auto-service:1.0-rc2'
		
		// logging
		if(!'MangaLog'.equals(project.name)) {
			compile project(':MangaLog')
		}
		
		// for testing
		testCompile 'junit:junit:4.12'
		testCompile 'org.mockito:mockito-core:1.10.19'
	}
	
	jar.manifest {
		attributes 'Built-At' : new Date(),
			'Built-With' : GradleVersion.current(),
			'Created-By' : "${System.properties.'java.runtime.version'} (${System.properties.'java.vm.vendor'})",
			'Info'
        attributes 'Branch' : gitbranch.getName(),
            'Date' : githead.getDate(),
            'Commit' : githead.id,
            'Git'
	}
	
	findbugs {
		effort = 'max'
		reportLevel = 'low'
	}
	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}
	
	pmd {
		ignoreFailures = true
		ruleSetFiles = files("${rootProject.projectDir}/misc/pmd.rulesets.xml")
	}
	
	eclipse {
		project {
			buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
		}
		classpath {
			file.withXml {
				def jfxrt = it.asNode().children().find{ entry ->
					return entry['@path'].contains('jfxrt') 
				}
				Node attributes = new Node(jfxrt, 'attributes')
				Node attribute = new Node(attributes, 'attribute')
				attribute.'@name' = 'javadoc_location'
				attribute.'@value' = 'http://docs.oracle.com/javafx/2/api/'
			}
		}
	}
	
	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
		classifier 'sources'
	}
	assemble.dependsOn sourceJar
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
		from tasks.javadoc.outputs
		classifier 'javadoc'
	}
	assemble.dependsOn javadocJar
	
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourceJar
				artifact javadocJar
			}
		}
	}
	
	repositories {
		mavenCentral()
	}
}

task dist(dependsOn: [distZip, distTar], group: 'Distribution', description: 'Run distZip and distTar') {
    // does nothing itself
}

// project-configuration
dependencies {
	compile project(':MangaLib')
	compile project(':MangaCtrl')
	
	compile 'commons-cli:commons-cli:1.3.1'
}

jar {
	manifest {
		attributes 'Main-Class' : 'de.herrlock.manga.Main',
			'Class-Path' : project.configurations.runtime
				.collect{ file -> "lib/${file.name}" }
				.sort{ it.toLowerCase() }
				.join(' ')
	}
}

distributions {
    main {
        baseName = project.name
        version = project.version
        contents {
            from 'LICENSE'
            from (jar.outputs) {
            	rename '.+', 'MangaLauncher.jar'
            }
            into('lib') {
            	from configurations.runtime
            	exclude 'jfxrt.jar'
            }
            into('tomcat.1905') {
	            into('webapps') {
		            from {
		            	// closure to initialise the resource on demand instead of directly
		            	project(':MangaWar').war.outputs
		            }
	            	rename '.+', 'ROOT.war'
            	}
	            into('temp') {
	            	from File.createTempFile('temp', '.txt')
	            	rename '.+', '.tmp'
            	}
            }
        }
    }
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}
